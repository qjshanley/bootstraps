AWSTemplateFormatVersion: 2010-09-09
Description: Creates the VPC, subnets, and configures default routing and security
Parameters:
  VpcCidrBlock:
    Type: String 
    Description: The IP address range for the VPC
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  SubnetConfig:
    Bastion:  { Az: us-west-2a, Cidr: x.x.0.0/26 }
    Subnet01: { Az: us-west-2a, Cidr: x.x.0.64/26 }
    Subnet02: { Az: us-west-2b, Cidr: x.x.0.128/26 }
    Subnet03: { Az: us-west-2c, Cidr: x.x.0.192/26 }
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "VPC" ] ] } ]
  BastionSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Bastion, Az ]
      CidrBlock: !Join
        - "."
        - - !Select [ 0, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 1, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 2, !Split [ ".", !FindInMap [ SubnetConfig, Bastion, Cidr ] ] ]
          - !Select [ 3, !Split [ ".", !FindInMap [ SubnetConfig, Bastion, Cidr ] ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "BastionSubnet", !FindInMap [ SubnetConfig, Bastion, Az ] ] ] } ]
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Subnet01, Az ]
      CidrBlock: !Join
        - "."
        - - !Select [ 0, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 1, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 2, !Split [ ".", !FindInMap [ SubnetConfig, Subnet01, Cidr ] ] ]
          - !Select [ 3, !Split [ ".", !FindInMap [ SubnetConfig, Subnet01, Cidr ] ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Subnet01, Az ] ] ] } ]
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Subnet02, Az ]
      CidrBlock: !Join
        - "."
        - - !Select [ 0, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 1, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 2, !Split [ ".", !FindInMap [ SubnetConfig, Subnet02, Cidr ] ] ]
          - !Select [ 3, !Split [ ".", !FindInMap [ SubnetConfig, Subnet02, Cidr ] ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Subnet02, Az ] ] ] } ]
  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Subnet03, Az ]
      CidrBlock: !Join
        - "."
        - - !Select [ 0, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 1, !Split [ ".", !Ref VpcCidrBlock ] ]
          - !Select [ 2, !Split [ ".", !FindInMap [ SubnetConfig, Subnet03, Cidr ] ] ]
          - !Select [ 3, !Split [ ".", !FindInMap [ SubnetConfig, Subnet03, Cidr ] ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Subnet03, Az ] ] ] } ]
  
  #
  # Add ingress rules to the VPC's default security group
  #
  SecurityGroupHttpInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ["Vpc", "DefaultSecurityGroup"]
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  SecurityGroupHttpsInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ["Vpc", "DefaultSecurityGroup"]
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0

  #
  # Configure IGW
  #
  Igw01:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "IGW" ] ] } ]
  Igw01ToVpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw01
      VpcId: !Ref Vpc
  Igw01RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: Igw01ToVpcAttachment
    Properties:
      VpcId: !Ref Vpc
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "ToIGW" ] ] } ]
  RouteToIgw01:
    Type: AWS::EC2::Route
    DependsOn: Igw01ToVpcAttachment
    Properties:
      GatewayId: !Ref Igw01
      RouteTableId: !Ref Igw01RouteTable
      DestinationCidrBlock: 0.0.0.0/0

  #
  # IGW Route Table Associations
  #
  BastionSubnetToIgw01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BastionSubnet
      RouteTableId: !Ref Igw01RouteTable
  PublicSubnet01ToIgw01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref Igw01RouteTable
  PublicSubnet02ToIgw01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref Igw01RouteTable
  PublicSubnet03ToIgw01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref Igw01RouteTable

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref Vpc
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "VPC" ] ]