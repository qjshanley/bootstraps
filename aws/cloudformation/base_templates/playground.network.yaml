AWSTemplateFormatVersion: 2010-09-09
Description: Network scaffolding
Mappings:
  SubnetConfig:
    Vpc01:     { Cidr: 20.1.0.0/16 }
    Public01:  { Az: us-west-2a, Cidr: 20.1.100.0/24 }
    Public02:  { Az: us-west-2b, Cidr: 20.1.101.0/24 }
    Public03:  { Az: us-west-2c, Cidr: 20.1.102.0/24 }
    Private01: { Az: us-west-2a, Cidr: 20.1.200.0/24 }
    Private02: { Az: us-west-2b, Cidr: 20.1.201.0/24 }
    Private03: { Az: us-west-2c, Cidr: 20.1.202.0/24 }
Resources:
  Vpc01:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ SubnetConfig, Vpc01, Cidr ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "VPC" ] ] } ]
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Public01, Az ]
      CidrBlock: !FindInMap [ SubnetConfig, Public01, Cidr ]
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Public01, Az ] ] ] } ]
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Public02, Az ]
      CidrBlock: !FindInMap [ SubnetConfig, Public02, Cidr ]
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Public02, Az ] ] ] } ]
  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Public03, Az ]
      CidrBlock: !FindInMap [ SubnetConfig, Public03, Cidr ]
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Public03, Az ] ] ] } ]
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Private01, Az ]
      CidrBlock: !FindInMap [ SubnetConfig, Private01, Cidr ]
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PrivateSubnet", !FindInMap [ SubnetConfig, Private01, Az ] ] ] } ]
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Private02, Az ]
      CidrBlock: !FindInMap [ SubnetConfig, Private02, Cidr ]
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PrivateSubnet", !FindInMap [ SubnetConfig, Private02, Az ] ] ] } ]
  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ SubnetConfig, Private03, Az ]
      CidrBlock: !FindInMap [ SubnetConfig, Private03, Cidr ]
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "PrivateSubnet", !FindInMap [ SubnetConfig, Private03, Az ] ] ] } ]
  Igw01:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "IGW" ] ] } ]
  Igw01ToVpc01Attachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw01
      VpcId: !Ref Vpc01
  Nat01:
    Type: AWS::EC2::NatGateway
    DependsOn: Igw01ToVpc01Attachment
    Properties:
      AllocationId: !GetAtt [ NatElasticIp, AllocationId ]
      SubnetId: !Ref PublicSubnet01
  NatElasticIp:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }
  PublicSubnet01ToIgw01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref Igw01RouteTable
  PublicSubnet02ToIgw01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref Igw01RouteTable
  PublicSubnet03ToIgw01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref Igw01RouteTable
  PrivateSubnet01ToNat01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref Nat01RouteTable
  PrivateSubnet02ToNat01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref Nat01RouteTable
  PrivateSubnet03ToNat01RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref Nat01RouteTable
  Nat01RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: Igw01ToVpc01Attachment
    Properties:
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "NAT" ] ] } ]
  RouteToNat01:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref Nat01
      RouteTableId: !Ref Nat01RouteTable
      DestinationCidrBlock: 0.0.0.0/0
  Igw01RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: Igw01ToVpc01Attachment
    Properties:
      VpcId: !Ref Vpc01
      Tags: [ { Key: Name, Value: !Join [ ":", [ !Sub "${AWS::StackName}", "IGW" ] ] } ]
  RouteToIgw01:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref Igw01
      RouteTableId: !Ref Igw01RouteTable
      DestinationCidrBlock: 0.0.0.0/0
Outputs:
  Vpc01:
    Description: The ID of the VPC
    Value: !Ref Vpc01
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "VPC" ] ]
  PublicSubnet01:
    Description: The subnet ID used for public web servers
    Value: !Ref PublicSubnet01
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Public01, Az ] ] ]
  PublicSubnet02:
    Description: The subnet ID used for public web servers
    Value: !Ref PublicSubnet02
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Public02, Az ] ] ]
  PublicSubnet03:
    Description: The subnet ID used for public web servers
    Value: !Ref PublicSubnet03
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "PublicSubnet", !FindInMap [ SubnetConfig, Public03, Az ] ] ]
  PrivateSubnet01:
    Description: The subnet ID used for private servers
    Value: !Ref PrivateSubnet01
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "PrivateSubnet", !FindInMap [ SubnetConfig, Private01, Az ] ] ]
  PrivateSubnet02:
    Description: The subnet ID used for private servers
    Value: !Ref PrivateSubnet02
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "PrivateSubnet", !FindInMap [ SubnetConfig, Private02, Az ] ] ]
  PrivateSubnet03:
    Description: The subnet ID used for private servers
    Value: !Ref PrivateSubnet03
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", "PrivateSubnet", !FindInMap [ SubnetConfig, Private03, Az ] ] ]
