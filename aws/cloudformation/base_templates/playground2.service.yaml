AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Type: String
    Description: Name of the environment you want to deploy your service to.
  # TargetGroup:
  #   Type: String
  #   Description: Name of the Target Group your service should run in.
#  EcsSecurityGroup:
#    Type: AWS::EC2::SecurityGroup::Id
#    Description: Select the security group the load balancer should be in.
Resources:
  # EcsSecurityGroupALBports:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'EcsSecurityGroup'
  #     IpProtocol: tcp
  #     FromPort: '31000'
  #     ToPort: '61000'
  #     SourceSecurityGroupId: !Ref 'EcsSecurityGroup'
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}"
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [ ":", [ !Sub "${Environment}-Network", "VPC" ] ]
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: 
        Fn::ImportValue:
          !Join [ ":", [ !Sub "${Environment}", "ALB" ] ]
      Port: '80'
      Protocol: HTTP
  ECSAlbListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'TargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'AlbListener'
      Priority: 1
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -ecs-demo-app]]
      ContainerDefinitions:
      - Name: simple-app
        Cpu: '10'
        Essential: 'true'
        Image: httpd:2.4
        Memory: '300'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-demo-app
        MountPoints:
        - ContainerPath: /usr/local/apache2/htdocs
          SourceVolume: my-vol
        PortMappings:
        - ContainerPort: 80
      - Name: busybox
        Cpu: 10
        Command: ['/bin/sh -c "while true; do echo ''<html> <head> <title>Amazon ECS
            Sample App</title> <style>body {margin-top: 40px; background-color: #333;}
            </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon
            ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now
            running on a container in Amazon ECS.</p>'' > top; /bin/date > date ;
            echo ''</div></body></html>'' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html
            ; sleep 1; done"']
        EntryPoint: [sh, -c]
        Essential: false
        Image: busybox
        Memory: 200
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-demo-app
        VolumesFrom:
        - SourceContainer: simple-app
      Volumes:
      - Name: my-vol
  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Join [ ":", [ !Sub "${Environment}", "ECS-Cluster" ] ]
      DesiredCount: 2
      LoadBalancers:
      - ContainerName: simple-app
        ContainerPort: '80'
        TargetGroupArn: !Ref 'TargetGroup'
      Role:
        Fn::ImportValue:
          !Join [ ":", [ !Sub "${Environment}", "ECS-Role" ] ]
      TaskDefinition: !Ref 'taskdefinition'
  # ECSServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: [ecs.amazonaws.com]
  #         Action: ['sts:AssumeRole']
  #     Path: /
  #     Policies:
  #     - PolicyName: ecs-service
  #       PolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
  #             'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
  #             'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
  #           Resource: '*'
  # ServiceScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn: service
  #   Properties:
  #     MaxCapacity: 2
  #     MinCapacity: 1
  #     ResourceId: !Join ['', [service/, !Ref 'EcsCluster', /, !GetAtt [service, Name]]]
  #     RoleARN: !GetAtt [AutoscalingRole, Arn]
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs
  # ServiceScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: AStepPolicy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref 'ServiceScalingTarget'
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: PercentChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalLowerBound: 0
  #         ScalingAdjustment: 200
  # ALB500sAlarmScaleUp:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     EvaluationPeriods: '1'
  #     Statistic: Average
  #     Threshold: '10'
  #     AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
  #     Period: '60'
  #     AlarmActions: [!Ref 'ServiceScalingPolicy']
  #     Namespace: AWS/ApplicationELB
  #     Dimensions:
  #     - Name: ECSService
  #       Value: !Ref 'service'
  #     ComparisonOperator: GreaterThanThreshold
  #     MetricName: HTTPCode_ELB_5XX_Count
  # AutoscalingRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: [application-autoscaling.amazonaws.com]
  #         Action: ['sts:AssumeRole']
  #     Path: /
  #     Policies:
  #     - PolicyName: service-autoscaling
  #       PolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
  #             'ecs:DescribeServices', 'ecs:UpdateService']
  #           Resource: '*'