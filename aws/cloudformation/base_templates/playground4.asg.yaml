AWSTemplateFormatVersion: 2010-09-09
Description: ASG, Launch Configuration, and IAM Roles

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two subnets in your VPC to launch instances into.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances in your ASG.
  MinSize:
    Type: Number
    Default: '1'
    Description: Minimum number of instances that can be launched in your ASG.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ASG.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [ t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, m4.16xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge,
      r4.large, r4.xlarge, r4.2xlarge, r4.4xlarge, r4.8xlarge, r4.16xlarge,
      i3.large, i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge, i3.16xlarge]
    ConstraintDescription: Please choose an instance type from the list.
  EcsClusterName:
    Description: The name of the ECS cluster you want these instances added to.
    Type: String
  StackLabels:
    Description: |
      These are labels you want to be applied to the instances in the ASG. This can 
      be used during container placement to ensure containers land in this ASG; useful 
      when you have multiple ASGs within a single ECS Cluster. Note, the string provided 
      is made lowercase and use double quotes. See ECS_INSTANCE_ATTRIBUTES for more details.
      EXAMPLE {\"stack\": \"development\"}
    Type: String

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-eca289fb
    us-east-2:
      AMIID: ami-446f3521
    us-west-1:
      AMIID: ami-9fadf8ff
    us-west-2:
      AMIID: ami-7abc111a
    eu-west-1:
      AMIID: ami-a1491ad2
    eu-central-1:
      AMIID: ami-54f5303b
    ap-northeast-1:
      AMIID: ami-9cd57ffd
    ap-southeast-1:
      AMIID: ami-a900a3ca
    ap-southeast-2:
      AMIID: ami-5781be34

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetIds'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: !Ref 'MinSize'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags: [ { Key: Name, Value: !Sub "${AWS::StackName}", PropagateAtLaunch: true } ]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'Ec2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Join
          - ""
          - - |
                #!/bin/bash -xe
                yum install -y aws-cli aws-cfn-bootstrap wget
                yum update -y

                wget -O /etc/init/ecssd_agent.conf https://raw.githubusercontent.com/awslabs/service-discovery-ecs-dns/1.0/ecssd_agent.conf
                chmod 644 /etc/init/ecssd_agent.conf
                wget -O /usr/local/bin/ecssd_agent https://github.com/awslabs/service-discovery-ecs-dns/releases/download/1.3/ecssd_agent
                chmod 755 /usr/local/bin/ecssd_agent

                #mkdir -p /tmp/scripts
                #aws s3 cp --recursive s3://some_bucket/scripts/ /tmp/scripts/
                #chmod 755 /tmp/scripts/some_script.sh  &&  /tmp/scripts/some_script.sh
                #DOCKER_AUTH=$(cat /tmp/scripts/.dockercfg | tr '\n' ' ')
                #rm -rf /tmp/scripts
                
                #echo "ECS_ENGINE_AUTH_TYPE=dockercfg" >> /etc/ecs/ecs.config              
                #echo "ECS_ENGINE_AUTH_DATA=${DOCKER_AUTH}" >> /etc/ecs/ecs.config
            - !Sub |
                echo "ECS_CLUSTER=${EcsClusterName}" >> /etc/ecs/ecs.config
                echo "ECS_INSTANCE_ATTRIBUTES=$(echo ${StackLabels} | tr [:upper:] [:lower:])" >> /etc/ecs/ecs.config
            - |
                echo "ECS_LOGLEVEL=warn" >> /etc/ecs/ecs.config
                echo "ECS_RESERVED_MEMORY=256" >> /etc/ecs/ecs.config
                echo "ECS_CONTAINER_STOP_TIMEOUT=5m" >> /etc/ecs/ecs.config
                cat /etc/ecs/ecs.config
            - !Sub |
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
                start ecs
                start ecssd_agent

  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Sub "${AWS::StackName}", "Role" ] ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
                  'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
                  'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: ['*']
        - PolicyName: S3OpsReadOnly
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['s3:GetObject', 's3:GetObjectVersion', 's3:ListBucket', 's3:ListBucketVersions']
                Resource: ["arn:aws:s3:::some_bucket", "arn:aws:s3:::some_bucket/*"]
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/AmazonRoute53FullAccess"]
  
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'Ec2Role']